import { bot } from './index.js';
import {
  ADMIN_PANEL_CHAT_ID,
  ITEMS_PER_PAGE,
  PAPA_BOT_CHAT_ID,
  PAYMENTS_CHAT_ID,
  REQUEST_PAYPAL_EU_ID,
  REQUEST_PAYPAL_UKR_ID,
  REQUEST_PROFIT_EU_ID,
  REQUEST_PROFIT_UKR_ID,
} from './consts.js';
import { db } from './db.js';

const generateUniqueID = () => {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let uniqueID = '';

  for (let i = 0; i < 6; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    uniqueID += characters[randomIndex];
  }

  return uniqueID;
};

const getPaginationKeyboard = (page, items, type) => {
  const totalPages = Math.ceil(items.length / ITEMS_PER_PAGE);
  const keyboard = [];

  if (page > 1) {
    keyboard.push({ text: '‚¨ÖÔ∏è', callback_data: `prev_${page - 1}_${type}` });
  }

  if (page < totalPages) {
    keyboard.push({ text: '‚û°Ô∏è', callback_data: `next_${page + 1}_${type}` });
  }

  return {
    reply_markup: {
      inline_keyboard: [keyboard, [{ text: '–ù–∞–∑–∞–¥', callback_data: 'user_profits' }]],
    },
  };
};

const sendCurrentPage = async (chatId, messageId, page, items, type) => {
  try {
    const filteredItems = items.filter(profit => profit.type === type);

    const pageItems = filteredItems.slice((page - 1) * ITEMS_PER_PAGE, page * ITEMS_PER_PAGE);
    const messageText = pageItems
      .map((item, index) => `${index + 1}. #${item.id} | ${item.email} | ${item.amount}‚Ç¨ | ${item.status}`)
      .join('\n');

    const options = {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'HTML',
      reply_markup: getPaginationKeyboard(page, filteredItems, type).reply_markup,
    };

    await bot.editMessageCaption(`<b>–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã ${type}:</b>\n\n${messageText}`, options);
  } catch (e) {
    console.log(e, 'sendCurrentPage');
  }
};

const getEmailButtons = (emails, currentPage, type) => {
  let buttons = [];
  let pageEmails = emails.slice(currentPage * ITEMS_PER_PAGE, (currentPage + 1) * ITEMS_PER_PAGE);

  pageEmails.forEach(email => {
    buttons.push([
      {
        text: email.email,
        callback_data: `paypal_email_${email.email}`,
      },
    ]);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
  buttons.push([
    { text: '<<', callback_data: `emails_page_${type}_back_${currentPage}` },
    { text: '>>', callback_data: `emails_page_${type}_next_${currentPage}` },
  ]);

  return buttons;
};

const isChatWithoutCaptcha = chatId => {
  const isTalkChat = chatId === Number(PAPA_BOT_CHAT_ID);
  const isAdminChat = chatId === Number(ADMIN_PANEL_CHAT_ID);
  const isRequestProfitChat = chatId === Number(REQUEST_PROFIT_EU_ID) || chatId === Number(REQUEST_PROFIT_UKR_ID);
  const isRequestPaypalChat = chatId === Number(REQUEST_PAYPAL_EU_ID) || chatId === Number(REQUEST_PAYPAL_UKR_ID);
  const isPaymentChat = chatId === Number(PAYMENTS_CHAT_ID);

  return isAdminChat || isRequestProfitChat || isRequestPaypalChat || isPaymentChat || isTalkChat;
};

const isEmpty = obj => {
  for (const prop in obj) {
    if (Object.hasOwn(obj, prop)) {
      return false;
    }
  }

  return true;
};

const updateProfitAmount = (array, id, newAmount) => {
  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞ —Å –Ω—É–∂–Ω—ã–º id
  const index = array.findIndex(item => item.id === id);

  if (index !== -1) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º amount
    const updatedItem = { ...array[index], amount: Number(newAmount) };

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
    return [...array.slice(0, index), updatedItem, ...array.slice(index + 1)];
  } else {
    // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
    return array;
  }
};

const updateProfitName = (array, id, newName) => {
  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞ —Å –Ω—É–∂–Ω—ã–º id
  const index = array.findIndex(item => item.id === id);

  if (index !== -1) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º amount
    const updatedItem = { ...array[index], name: newName };

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
    return [...array.slice(0, index), updatedItem, ...array.slice(index + 1)];
  } else {
    // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
    return array;
  }
};

const generateUser = (chatId, nickname) => {
  return {
    chatId,
    nickname,
    isAdmin: false,
    nametag: `#${generateNametag(String(chatId))}`,
    teamTopProfit: 0,
    profits: [],
    paypals: [],
    ibans: [],
    bitcoin: '',
    trc20: '',
    ethereum: '',
  };
};

const extractValue = (str, pattern) => {
  let parts = str.split(pattern);
  if (parts.length > 1) {
    return parts[1].split('\n')[0].trim(); // trim() —É–±–µ—Ä–µ—Ç –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
  }
  return null; // –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
};

const extractFieldValue = (str, key) => {
  const regex = new RegExp(key + ':\\s*([\\w‚Ç¨@#.]+)');
  // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ
  const match = str.match(regex);
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  return match ? match[1] : null;
};

const getInfoFromMessage = message => {
  const messageId = extractFieldValue(message.caption, `profit_message_id`);
  const user_chat_id = extractFieldValue(message.caption, `user_chat_id`);
  const profitId = extractFieldValue(message.caption, `–ü—Ä–æ—Ñ–∏—Ç ID`);

  const correctProfitId = profitId.split('#')[1];

  return {
    profit_message_id: messageId,
    user_chat_id: user_chat_id,
    profitId: correctProfitId,
  };
};

const generateNametag = numberSet => {
  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —á–∏—Å–µ–ª
  let hash = 0;
  for (let i = 0; i < numberSet.length; i++) {
    let char = numberSet.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ 32–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ö–µ—à –≤ —Å—Ç—Ä–æ–∫—É –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  hash = Math.abs(hash).toString(16).toUpperCase();

  // –û–±—Ä–µ–∑–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ 7 —Å–∏–º–≤–æ–ª–æ–≤
  if (hash.length > 7) {
    hash = hash.substring(0, 7);
  } else {
    while (hash.length < 7) {
      hash += '0';
    }
  }

  return hash;
};

const isArrayOfEmails = arr => {
  const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
  return Array.isArray(arr) && arr.every(email => emailRegex.test(email));
};

const countEmailsByType = async () => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö email'–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const emailsRef = db.collection('emails');
  const snapshot = await emailsRef.where('status', '==', '–°–≤–æ–±–æ–¥–µ–Ω').get();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
  let typeCounters = {};

  // –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ email'–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
  snapshot.forEach(doc => {
    const { type } = doc.data();
    if (typeCounters[type]) {
      typeCounters[type] += 1;
    } else {
      typeCounters[type] = 1;
    }
  });

  return typeCounters;
};

const updateAmountInPaymentsChat = (type, user, amount) => {
  return `${type === 'UKR' ? 'üá∫üá¶' : 'üá™üá∫'} Paypal: <b>${type}</b>\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>${user}</b>\nüí∂ –°—É–º–º–∞: <b>${amount}‚Ç¨</b>`;
};

export {
  generateUser,
  generateUniqueID,
  sendCurrentPage,
  extractValue,
  countEmailsByType,
  isArrayOfEmails,
  isChatWithoutCaptcha,
  updateProfitAmount,
  updateProfitName,
  getEmailButtons,
  updateAmountInPaymentsChat,
  isEmpty,
  extractFieldValue,
  getInfoFromMessage,
};

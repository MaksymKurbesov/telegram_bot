import { REQUEST_PROFIT_EU_ID, REQUEST_PROFIT_UKR_ID, STATUS_EMOJI_MAP } from '../../consts.js';

export const REQUEST_PROFIT_CHATS = {
  ukr: REQUEST_PROFIT_UKR_ID,
  ff: REQUEST_PROFIT_EU_ID,
};

export const PROFIT_TYPE_EMOJI = {
  ukr: `üá∫üá¶`,
  ff: `üá™üá∫`,
};

export const SUCCESS_EDIT_PROFIT_MESSAGE = {
  amount: `üü¢ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!`,
  name: `üü¢ –ò–º—è –ø—Ä–æ—Ñ–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!`,
};

export const updateProfitStatus = (message, newStatus, id) => {
  const regex = /(\s\S+ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏—Ç–∞: )[^\n]+/;
  const updatedStatus = message.replace(regex, `\n${STATUS_EMOJI_MAP[newStatus]} –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏—Ç–∞: ${newStatus}`);
  return updatedStatus.replace(/payment_message_id: .*/, 'payment_message_id: ' + id);
};

export const generateStatusMessage = (profitId, status, payment_message_id) => {
  const baseMessage = `<b>‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏—Ç–∞ #${profitId}:\n\n${STATUS_EMOJI_MAP[status]} ${status}</b>`;
  const additionalMessage =
    status && payment_message_id === '–ù–ê –ü–ê–õ–ö–ï!'
      ? `\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç –≤ —á–∞—Ç–µ –≤—ã–ø–ª–∞—Ç: https://t.me/c/2017066381/${payment_message_id}`
      : '';

  return baseMessage + additionalMessage;
};

export const generateCaptionFromUserPaypals = userPaypals => {
  const userPaypalsStr = userPaypals
    .map(userPaypal => {
      return `<b>${userPaypal.type}</b> | ${userPaypal.email} | –ù–∞ —Å—É–º–º—É: ${userPaypal.limit}`;
    })
    .join('\n');

  return `<b>üÖøÔ∏è –í–∞—à–∏ PayPal:</b>\n\n${userPaypalsStr}`;
};

export const generateButtonsFromUserPaypals = userPaypals => {
  const buttons = userPaypals.map(paypal => [{ text: `${paypal.email}`, callback_data: `request_profit_paypal_${paypal.email}` }]);
  buttons.push([{ text: `–ù–∞–∑–∞–¥`, callback_data: 'cabinet' }]);
  return buttons;
};

export const updateCaption = (request_paypal_type, request_profit_paypalEmail, text) => {
  return `<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–∞ PayPal ${request_paypal_type.toUpperCase()}:\n\n${request_profit_paypalEmail}\n\n${text}!</b>`;
};

export const getUpdateProfitTextByType = (type, profitId) => {
  return `<b>‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ ${type === 'amount' ? `–Ω–æ–≤—É—é —Å—É–º–º—É` : `–Ω–æ–≤–æ–µ –∏–º—è`} –¥–ª—è –ø—Ä–æ—Ñ–∏—Ç–∞ ${profitId}!</b>`;
};
